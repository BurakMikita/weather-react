{"version":3,"sources":["Preloader/preloader.svg","Preloader/Preloader.tsx","components/Weather.tsx","components/PageWeather.tsx","components/WeatherDays.tsx","api/api.tsx","redux/Reducer.tsx","redux/index.tsx","App.js","index.js"],"names":["Preloader","style","backgroundColor","src","preloader","Weather","weatherData","alignSelf","city","name","Math","round","list","main","temp","weather","description","dt_txt","className","filter","e","index","map","PageWeather","setCity","useState","valueInput","setValueInput","placeholder","onChange","target","value","onClick","cod","color","fontSize","to","WeatherDays","data","console","log","time","split","React","memo","apiRequest","fetch","then","response","json","ADD_WEATHER","IS_FETCHING","SET_ERROR","initialState","isFetching","error","actions","type","Reducer","state","action","payload","rootReducer","combineReducers","add","store","createStore","compose","applyMiddleware","thunkMiddleware","App","useSelector","logo","localStorage","getItem","dispatch","useDispatch","useEffect","a","setItem","getDataWeather","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f7010c0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/preloader.5788b05c.svg\";","import React from 'react';\r\nimport preloader from './preloader.svg';\r\n\r\n\r\nlet Preloader: React.FC  = () => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;","import React, {Fragment} from 'react';\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport {ObjectWeathersType} from \"../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    weatherData:ObjectWeathersType\r\n}\r\nconst Weather: React.FC<PropsType>  = ({weatherData}) => {\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n        <div style={{alignSelf:\"center\"} }>\r\n            <p><b>City: </b>{weatherData.city.name}</p>\r\n            <p><b>Temperature: </b> {Math.round(weatherData.list[0].main.temp)}℃</p>\r\n            <p> <b>Description: </b>{weatherData.list[0].weather[0].description}</p>\r\n            <p><b>Data:</b> {weatherData.list[0].dt_txt }</p>\r\n        </div>\r\n\r\n\r\n            <div className='forecast'>\r\n                {weatherData.list.filter((e,index)=> index % 8 === 0).filter((e,index)=>index !== 0).map((e,index)=>{\r\n\r\n                  return (<div className='items' key={index}>\r\n                          {index === 0 ? <div>tomorrow</div>:index === 1 ? <div>after tomorrow</div>: <div>in 3 days</div> }\r\n                    <div><b>Temperature:</b> <span>{Math.round(e.main.temp)}℃</span></div>\r\n                      <div><b>Description:</b> <span>{e.weather[0].description}</span></div>\r\n                          <div> <b>Data:</b> <span>{e.dt_txt }</span></div>\r\n                      </div>\r\n                  )\r\n                })}\r\n            </div>\r\n\r\n        </Fragment>\r\n\r\n    );\r\n};\r\n\r\nexport default Weather;","import React, {useState} from 'react';\r\nimport Weather from \"./Weather\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ObjectWeathersType} from \"../types/types\";\r\n\r\ntype PropsType = {\r\n    setCity: (string:string)=>void\r\n    city:string\r\n    weatherData:ObjectWeathersType\r\n}\r\n\r\nconst PageWeather: React.FC<PropsType> = ({setCity,weatherData, city}) => {\r\n    const [valueInput, setValueInput] = useState('')\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div  className='input'  >\r\n                <input  className='search-input' placeholder='Enter city' onChange={e=>setValueInput(e.target.value)}\r\n                        value={valueInput}\r\n                /> <button className='bttn' onClick={()=>{setCity(valueInput) ;setValueInput('')}}> Search</button>\r\n\r\n            </div>\r\n\r\n\r\n            { weatherData.cod === '404' ?<div style={{alignSelf: 'center', color:'red',\r\n                fontSize:'20px'}}>enter the correct city name</div>:<Weather weatherData={weatherData}/>}\r\n\r\n                <div className='buttons'>\r\n                <button onClick={()=>{setCity('Minsk')}}>Minsk</button>\r\n                <button onClick={()=>{setCity('Moscow')}}>Moscow</button>\r\n                <button onClick={()=>{setCity('Bratislava')}}>Bratislava</button>\r\n            </div>\r\n            <Link className='detalis' to={`/days/${city}`}>Details</Link>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PageWeather;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {ObjectWeathersType} from \"../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    data:  ObjectWeathersType\r\n}\r\n\r\nconst WeatherDays: React.FC<PropsType> = ({data}) => {\r\n    console.log('df')\r\n    return (\r\n        <div className='container'>\r\n        <div className='forecastDays'>\r\n            {data.list.filter((e,index)=>index <= 7).map((e,index)=>{\r\n         let time     =  e.dt_txt.split(' ')\r\n                return (<div className='items' key={index}>\r\n                        <div><b>Temperature:</b><span>{Math.round(e.main.temp)}℃</span>{time[1]==='00:00:00' ? <span className='tomorrow'>tomorrow</span>: null}\r\n                           </div>\r\n                        <div><b>Description:</b> <span>{e.weather[0].description}</span></div>\r\n                        <div> <b>Data:</b> <span>{time[1]}</span></div>\r\n\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n            <Link className='detalis' to={`/`}>Back</Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(WeatherDays);","import {ObjectWeathersType} from \"../types/types\";\r\n\r\n\r\nconst ApiKey = '1a14457ca2795e8e05dcaf6e9d15d940'\r\n\r\n\r\n\r\nexport const apiRequest = (city:string):Promise<ObjectWeathersType>=> {\r\n    return fetch(`https://api.openweathermap.org/data/2.5/forecast/?q=${city}&units=metric&cnt=32&mode=json&appid=${ApiKey}`).then(\r\n        response=>response.json()\r\n    )\r\n}","import {apiRequest} from \"../api/api\";\r\nimport {InferActionsTypes, ObjectWeathersType} from './../types/types'\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./index\";\r\n\r\n\r\nconst ADD_WEATHER = 'ADD_WEATHER'\r\nconst IS_FETCHING = 'IS_FETCHING'\r\nconst SET_ERROR = 'SET_ERROR'\r\n\r\nlet initialState = {\r\n        data:null as null | ObjectWeathersType,\r\n    isFetching: true as boolean,\r\n    error: null as null | string\r\n\r\n};\r\n\r\nexport type initialStateType = typeof initialState\r\n\r\n\r\nconst Reducer = (state= initialState, action:ActionsTypes ):initialStateType=> {\r\n        switch (action.type){\r\n                case ADD_WEATHER:\r\n                        return {...state, data: action.data}\r\n            case IS_FETCHING: {\r\n                return {...state, isFetching: action.isFetching}\r\n            }\r\n            case SET_ERROR:\r\n                return {...state, error: action.payload}\r\n\r\n                default:\r\n                        return state\r\n        }\r\n}\r\nexport const actions = {\r\n    setData : (data: ObjectWeathersType) => ({\r\n        type: ADD_WEATHER, data\r\n    }as const),\r\n     toggleIsFetching : (isFetching: boolean) => ({\r\n        type: IS_FETCHING, isFetching\r\n    }as const),\r\n     setError : (payload:string) => ({type: SET_ERROR, payload}as const)\r\n}\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getDataWeather = (city:string):ThunkType=> async (dispatch) => {\r\n    try {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        let response = await apiRequest(city)\r\n        dispatch(actions.setData(response))\r\n        console.log(response)\r\n        localStorage.setItem('city',city)\r\n        dispatch(actions.toggleIsFetching(false));\r\n    } catch (e) {\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Reducer\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//.then(\r\n  //  data=> {setWeatherData(data)\r\n    //        setValueInput('')\r\n      //      localStorage.setItem('city',city)","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport Reducer from \"./Reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n   add: Reducer\r\n})\r\n\r\ntype reducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<reducerType>\r\n\r\n\r\n\r\n\r\nconst store = createStore(rootReducer,  compose(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store","import './App.css';\nimport React, {Fragment, useEffect, useState} from \"react\";\nimport Preloader from \"./Preloader/Preloader\";\nimport PageWeather from \"./components/PageWeather\"\nimport {\n    Routes,\n    Route\n} from \"react-router-dom\";\nimport WeatherDays from \"./components/WeatherDays\";\nimport {getDataWeather} from \"./redux/Reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./redux\";\n\n\nconst App=()=>{\n\n    const nameCity =()=> {\n     let logo  = localStorage.getItem('city')\n\n        if(logo){\n            return logo\n        }else {\n            return 'Minsk'\n        }\n    }\n     const preloader   = useSelector((state)=>state.add.isFetching)\n    const err = useSelector((state)=> state.add.error)\n    const data   = useSelector((state)=>state.add.data)\n\n\n\n\n    const [city, setCity] = useState(nameCity)\n\n\n    const dispatch = useDispatch()\n\n\n\n  useEffect(()=>{(dispatch(getDataWeather(city))   )}\n\n      ,[city])\n\n\n\nconsole.log('Mein')\n    if(preloader){\n        return <Preloader/>\n    }\n\n\n\n\n\n    // @ts-ignore\n    return (\n      <Fragment>\n\n          <Routes>\n              <Route path=\"/\" element={<PageWeather\n                                                    setCity={setCity}\n                                                    weatherData={data} city={city}/>} />\n              <Route path=\"days/:city\" element={<WeatherDays  data={data}/>} />\n          </Routes>\n\n      </Fragment>\n\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {HashRouter} from \"react-router-dom\";\nimport { Provider} from \"react-redux\";\nimport store from '../src/redux/index'\n\nReactDOM.render(\n\n      <HashRouter>\n          <Provider store={store}>\n      <App />\n          </Provider>\n      </HashRouter>,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}